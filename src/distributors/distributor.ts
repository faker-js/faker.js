import type { Randomizer } from '../randomizer';

/**
 * A function that determines the distribution of generated values.
 * Values generated by a randomizer are considered uniformly distributed, distributor functions can be used to change this.
 * If many results are collected the results form a limited distribution between `0` and `1`.
 * So an exponential distributor will values resemble a limited exponential distribution.
 *
 * Common examples of distributor functions are:
 *
 * - Uniform distributor: All values have the same likelihood.
 * - Normal distributor: Values are more likely to be close to a specific value.
 * - Exponential distributor: Values are more likely to be close to 0.
 *
 * Distributor functions can be used by some faker functions such as `faker.number.int()` and `faker.number.float()`.
 *
 * Please note that the result from the distributor function is processed further by the function accepting it.
 * E.g. a distributor result of `0.5` within a call to `faker.number.int({ min: 10, max: 20 })` will result in `15`.
 *
 * @param randomizer The randomizer to use for generating values.
 *
 * @returns Generates a random float between 0 (inclusive) and 1 (exclusive).
 *
 * @example
 * import { Distributor, Randomizer, faker } from '@faker-js/faker';
 *
 * const alwaysMin: Distributor = () => 0;
 * const uniform: Distributor = (randomizer: Randomizer) => randomizer.next();
 *
 * faker.number.int({ min: 2, max: 10, distributor: alwaysMin }); // 2
 * faker.number.int({ min: 0, max: 10, distributor: uniform }); // 5
 *
 * @since 9.6.0
 */
export type Distributor = (randomizer: Randomizer) => number;
